name: Pipeline de Build e Push do Agente

# Define os gatilhos (triggers) que iniciarão a pipeline
on:
  # Roda a pipeline quando houver um push para a branch 'main'
  push:
    branches: [ "main" ]
  # Roda também em Pull Requests que têm a 'main' como alvo
  pull_request:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que a pipeline executará
jobs:
  build-and-push:
    # O tipo de máquina virtual que o job rodará.
    runs-on: ubuntu-latest

    # A sequência de passos que o job executará
    steps:
      # 1. Checkout do Código
      - name: Checkout do Repositório
        uses: actions/checkout@v3

      # 2. Lint do Código Python
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Instalar dependências de lint
        run: pip install flake8
      - name: Rodar Flake8
        run: flake8 agent/ --count --show-source --statistics

      # 3. Login no GitHub Container Registry (GHCR)
      - name: Login no GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Preparar Metadados da Imagem (Converter para Lowercase)
      - name: Gerar tags da imagem em minúsculas
        id: meta
        # Este comando pega o nome do repositório, converte para minúsculas
        # e cria a tag completa, salvando em uma variável de output.
        run: echo "TAGS=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')/viaipe-agent:latest" >> $GITHUB_OUTPUT

      # 5. Configurar o Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6. Construir e Publicar a Imagem Docker
      - name: Build e Push da imagem do agente
        uses: docker/build-push-action@v4
        with:
          context: ./agent
          file: ./agent/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.TAGS }}